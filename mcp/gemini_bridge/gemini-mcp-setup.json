{
  "name": "gemini-context-bridge-mcp",
  "version": "1.0.0",
  "description": "MCP server for bridging Claude Code to Gemini 2.5's large context window",
  "main": "index.js",
  "type": "module",
  "bin": {
    "gemini-bridge-mcp": "./index.js"
  },
  "scripts": {
    "start": "node index.js",
    "dev": "node --watch index.js",
    "test": "echo \"No tests yet\" && exit 0"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.0.0",
    "@google/generative-ai": "^0.21.0",
    "zod": "^3.23.8"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "keywords": [
    "mcp",
    "claude-code",
    "gemini",
    "ai",
    "context-bridge"
  ],
  "author": "Your Name",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/your-username/gemini-context-bridge-mcp"
  }
}

---

# Setup Instructions

## Installation

### Quick Start (Recommended)
```bash
# Clone or create project directory
mkdir gemini-context-bridge-mcp
cd gemini-context-bridge-mcp

# Copy the index.js and package.json files
# Then install dependencies
npm install

# Set your Gemini API key
export GEMINI_API_KEY="your-api-key-here"

# Test the server
npm start
```

### Add to Claude Code
```bash
# Add as global MCP server (available everywhere)
claude mcp add gemini-bridge -s user -- node /path/to/gemini-context-bridge-mcp/index.js

# Or add to specific project's .mcp.json
```

## Configuration

### Environment Variables
Create a `.env` file (optional, for development):
```bash
GEMINI_API_KEY=your_gemini_api_key_here
MAX_FILE_SIZE=10485760
MAX_TOTAL_TOKENS=900000
DEFAULT_MODEL=gemini-2.5-flash
```

### Claude Code MCP Configuration
Add to your Claude Code configuration:

#### Global Configuration (~/.claude.json):
```json
{
  "mcpServers": {
    "gemini-bridge": {
      "command": "node",
      "args": ["/path/to/gemini-context-bridge-mcp/index.js"],
      "env": {
        "GEMINI_API_KEY": "your-api-key-here"
      }
    }
  }
}
```

#### Project-specific Configuration (.mcp.json):
```json
{
  "mcpServers": {
    "gemini-bridge": {
      "command": "node", 
      "args": ["./tools/gemini-bridge-mcp/index.js"],
      "env": {
        "GEMINI_API_KEY": "your-api-key-here"
      }
    }
  }
}
```

## Usage Examples

### In Claude Code:
```
# Analyze entire project structure
Can you analyze all TypeScript files in my src/ directory for potential performance issues? Use the gemini bridge to include the full context.

# Specific file analysis
Please review these React components for accessibility issues: [file1.tsx, file2.tsx, file3.tsx]. Use Gemini's large context to see patterns across all files.

# Estimate before sending
Before analyzing, can you estimate how many tokens my entire /src directory would use with Gemini?

# Find relevant files first
Can you find all the configuration files in my project root, then analyze them for inconsistencies?
```

## Troubleshooting

### Common Issues
1. **"GEMINI_API_KEY not found"**
   - Ensure environment variable is set
   - Check MCP server configuration includes the API key

2. **"Context too large" errors**
   - Use `estimate_context_size` tool first
   - Filter files by extension or directory
   - Consider using gemini-2.5-flash for smaller contexts

3. **MCP server not connecting**
   - Verify Node.js version (>=18.0.0)
   - Check file paths in configuration
   - Use `claude mcp list` to verify server status

### Debug Mode
```bash
# Enable MCP debug logging
claude --mcp-debug

# Check MCP server logs
claude mcp status
```

## API Key Setup

### Getting a Gemini API Key
1. Visit [Google AI Studio](https://aistudio.google.com/)
2. Sign in with your Google account
3. Create a new API key
4. Copy the key and add to your environment

### Cost Considerations
- Gemini 2.5 Flash: Cost-effective for most analysis tasks
- Gemini 2.5 Pro: For complex reasoning and comprehensive analysis
- Monitor usage through Google Cloud Console

## Security Notes
- Never commit API keys to version control
- Use environment variables or secure credential management
- Consider using Google Cloud IAM for production deployments
- File access is limited to specified paths only